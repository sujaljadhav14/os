#include <stdio.h>

int main()
{
    int n, i, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10], ct[10];
    float avg_wt, avg_tat;
    
    // Input the number of processes
    printf("\nEnter number of processes: ");
    scanf("%d", &n);
    y = n;
    
    // Input arrival time and burst time for each process
    for (i = 0; i < n; i++)
    {
        printf("\nEnter arrival time and burst time of process %d", i + 1);
        printf("\nArrival time: ");
        scanf("%d", &at[i]);
        printf("Burst time: ");
        scanf("%d", &bt[i]);
        temp[i] = bt[i];
    }
    
    // Input time quantum
    printf("\nEnter time quantum for the process: ");
    scanf("%d", &quant);
    
    printf("\nProcess  BT  TAT  WT\n");
    
    // Round Robin scheduling
    for (sum = 0, i = 0; y != 0;)
    {
        if (temp[i] <= quant && temp[i] > 0)
        {
            sum = sum + temp[i]; // Time progresses by the burst time of the process
            temp[i] = 0; // Process is completed
            count = 1; // Mark as completed
        }
        else if (temp[i] > 0)
        {
            temp[i] = temp[i] - quant; // Reduce the burst time
            sum = sum + quant; // Time progresses by the time quantum
        }
        
        if (temp[i] == 0 && count == 1)
        {
            y--; // Decrease the remaining process count
            ct[i] = sum; // Store the completion time of the process
            printf("\nP%d\t%d\t%d\t%d", i + 1, bt[i], ct[i] - at[i], ct[i] - at[i] - bt[i]);
            wt = wt + (ct[i] - at[i] - bt[i]); // Add to total waiting time
            tat = tat + (ct[i] - at[i]); // Add to total turnaround time
            count = 0; // Reset the count
        }
        
        // Round Robin Logic: Go to the next process or restart from the first process
        if (i == n - 1)
        {
            i = 0;
        }
        else if (at[i + 1] <= sum)
        {
            i++;
        }
        else
        {
            i = 0;
        }
    }
    
    // Calculate the average waiting time and turnaround time
    avg_wt = (float)wt / n;
    avg_tat = (float)tat / n;
    
    printf("\nAverage Turnaround Time: %f", avg_tat);
    printf("\nAverage Waiting Time: %f\n", avg_wt);
    
    return 0;
}
